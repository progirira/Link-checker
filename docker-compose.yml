services:
  scrapper:
    build:
      context: .
      dockerfile: cmd/scrapper/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      postgres:
        condition: service_healthy
      bot:
        condition: service_started
    networks:
      - backend

  bot:
    build:
      context: .
      dockerfile: cmd/bot/Dockerfile
    ports:
      - "8090:8090"
    networks:
      - backend

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_INITDB_ARGS: --auth-host=password
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: scrapper
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 3s
      timeout: 3s
      retries: 5
  migrate:
    image: migrate/migrate
    container_name: migrations
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    networks:
      - backend
    env_file:
      - .env
    command: [
      "-path", "/migrations",
      "-database", "${DATABASE_URL}",
      "up"
    ]
volumes:
  postgres_data:
networks:
  backend:
    driver: bridge